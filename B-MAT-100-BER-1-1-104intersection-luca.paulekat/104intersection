#!/usr/bin/env python

import sys
import math

def quadratic_equation( a, b, c):
    t = [0, 0, 0]
    if a == 0:
        print("There is an infinite number of intersection points.")
        return t
    discriminant = b * b - 4 * a * c
    root = math.sqrt(abs(discriminant))
    if discriminant > 0:
        print("2 intersection points:")
        t[0] = (-b + root)/(2 * a)
        t[1] = (-b - root)/(2 * a)
        t[2] = 2
    elif discriminant == 0:
        print("1 intersection point:")
        t[0] = -b / (2 * a)
        t[2] = 1
    else:
        print("No intersection point.")
    return t

help = """USAGE
./104intersection opt xp yp zp xv yv zv p
DESCRIPTION
opt surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone
(xp, yp, zp) coordinates of a point by which the light ray passes through
(xv, yv, zv) coordinates of a vector parallel to the light ray
p parameter: radius of the sphere, radius of the cylinder, or
angle formed by the cone and the Z-axis"""

class intersection():
    def __init__(self):
        self.line_starting_point = [int(sys.argv[2]), int(sys.argv[3]), int(sys.argv[4])]
        self.vector_of_line = [int(sys.argv[5]), int(sys.argv[6]), int(sys.argv[7])]
        print (f"Line passing through the point ({self.line_starting_point[0]}, {self.line_starting_point[1]}, {self.line_starting_point[2]}) and parallel to the vector ({self.vector_of_line[0]}, {self.vector_of_line[1]}, {self.vector_of_line[2]})")
        self.radius = int(sys.argv[8])
        self.t = []

    def calc_sphere(self):
        a = self.vector_of_line[0] * self.vector_of_line[0] + self.vector_of_line[1] * self.vector_of_line[1] + self.vector_of_line[2] * self.vector_of_line[2]
        b = 2 * (self.line_starting_point[0] * self.vector_of_line[0] + self.line_starting_point[1] * self.vector_of_line[1] + self.line_starting_point[2] * self.vector_of_line[2])
        c = (self.line_starting_point[0] * self.line_starting_point[0] + self.line_starting_point[1] * self.line_starting_point[1] + self.line_starting_point[2] * self.line_starting_point[2]) - (self.radius * self.radius)
        self.t = quadratic_equation(a, b, c)
        i = 0
        result = [0, 0, 0]
        while i < self.t[2]:
            result[0] = self.line_starting_point[0] + self.t[i] * self.vector_of_line[0]
            result[1] = self.line_starting_point[1] + self.t[i] * self.vector_of_line[1]
            result[2] = self.line_starting_point[2] + self.t[i] * self.vector_of_line[2]
            print("({:.3f}, {:.3f}, {:.3f})".format(round(result[0], 3), round(result[1], 3), round(result[2], 3)))
            i += 1

    def calc_cylinder(self):
        a = self.vector_of_line[0] * self.vector_of_line[0] + self.vector_of_line[1] * self.vector_of_line[1]
        b = 2 * (self.line_starting_point[0] * self.vector_of_line[0] + self.line_starting_point[1] * self.vector_of_line[1])
        c = (self.line_starting_point[0] * self.line_starting_point[0] + self.line_starting_point[1] * self.line_starting_point[1]) - (self.radius * self.radius)
        self.t = quadratic_equation(a, b, c)
        i = 0
        result = [0, 0, 0]
        while i < self.t[2]:
            result[0] = self.line_starting_point[0] + self.t[i] * self.vector_of_line[0]
            result[1] = self.line_starting_point[1] + self.t[i] * self.vector_of_line[1]
            result[2] = self.line_starting_point[2] + self.t[i] * self.vector_of_line[2]
            print("({:.3f}, {:.3f}, {:.3f})".format(round(result[0], 3), round(result[1], 3), round(result[2], 3)))
            i += 1

    def calc_cone(self):
        tan = math.tan(math.radians(self.radius)) * math.tan(math.radians(self.radius))
        a = self.vector_of_line[0] * self.vector_of_line[0] + self.vector_of_line[1] * self.vector_of_line[1] - (self.vector_of_line[2] * self.vector_of_line[2] * tan)
        b = 2 * (self.line_starting_point[0] * self.vector_of_line[0] + self.line_starting_point[1] * self.vector_of_line[1] - (self.line_starting_point[2] * self.vector_of_line[2] * tan))
        c = (self.line_starting_point[0] * self.line_starting_point[0] + \
                    self.line_starting_point[1] * self.line_starting_point[1] - \
                    (self.line_starting_point[2] * self.line_starting_point[2] * tan))
        self.t = quadratic_equation(a, b, c)
        i = 0
        result = [0, 0, 0]
        while i < self.t[2]:
            result[0] = self.line_starting_point[0] + self.t[i] * self.vector_of_line[0]
            result[1] = self.line_starting_point[1] + self.t[i] * self.vector_of_line[1]
            result[2] = self.line_starting_point[2] + self.t[i] * self.vector_of_line[2]
            print("({:.3f}, {:.3f}, {:.3f})".format(round(result[0], 3), round(result[1], 3), round(result[2], 3)))
            i += 1

if __name__ == '__main__':
    if sys.argv and "-h" in sys.argv:
        print(help)
    if len(sys.argv) != 9:
        exit(84)
    try:
        int(sys.argv[1])
        int(sys.argv[2])
        int(sys.argv[3])
        int(sys.argv[4])
        int(sys.argv[5])
        int(sys.argv[6])
        int(sys.argv[7])
        int(sys.argv[8])
    except:
        exit(84)
    if int(sys.argv[5]) == 0 and int(sys.argv[6]) == 0 and int(sys.argv[7]) == 0:
        exit(84)
    if int(sys.argv[1]) != 1 and int(sys.argv[1]) != 2 and int(sys.argv[1]) != 3:
        exit(84)
    if int(sys.argv[1]) == 1:
        if int(sys.argv[8]) < 0:
            exit(84)
        print(f"Sphere of radius {sys.argv[8]}")
        obj = intersection()
        obj.calc_sphere()
    if int(sys.argv[1]) == 2:
        if int(sys.argv[8]) < 0:
            exit(84)
        print(f"Cylinder of radius {sys.argv[8]}")
        obj = intersection()
        obj.calc_cylinder()
    if int(sys.argv[1]) == 3:
        if int(sys.argv[8]) > 90 or int(sys.argv[8]) < 0:
            exit(84)
        print(f"Cone with a {sys.argv[8]} degree angle")
        obj = intersection()
        obj.calc_cone()